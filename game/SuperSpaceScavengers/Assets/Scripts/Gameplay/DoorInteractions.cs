﻿///////////////////////////////////////////////////////////////////////////////////////////////////
//AUTHOR — Travis Moore
//SCRIPT — DoorInteractions.cs
///////////////////////////////////////////////////////////////////////////////////////////////////

using UnityEngine;
//using UnityEngine.UI;
using System.Collections;
//using System.Collections.Generic;

public class DoorInteractions : MonoBehaviour
{
    #region FIELDS
    [SerializeField]
    DetectionSphere doorDetection;
    Door door = null;

    #endregion

    #region INITIALIZATION
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnValidate
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void OnValidate()
    {
        //refs


        //initial values

    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Awake
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void Awake()
    {
        //SetSubscriptions();
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// Start
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void Start()
    {
        doorDetection.callOnEnter += EnteringDoorRange;
        doorDetection.callOnExit += LeavingDoorRange;

        //set event subscriptions
        SetSubscriptions();
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// SetSubscriptions
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void SetSubscriptions()
    {
        InputEvents.Interact.Subscribe(OnDoorInteraction);
    }
    #endregion

    #region PUBLIC METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// function
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////

    #endregion

    #region PRIVATE METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// upon enter of door detection, assign this door and attempt to open it if it is automatic
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void EnteringDoorRange(GameObject _door)
    {
        door = _door.GetComponent<Door>();
        door.AutomaticDoorCheck();

    }
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// upon exit of door detection, attempt to close an automatic door and set door to null
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void LeavingDoorRange(GameObject _door)
    {
        door.AutomaticDoorCheck();
        door = null;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// upon player pressing the interact input key/button, check for a door and attempt to open it
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void OnDoorInteraction(InputEventInfo _inputEventInfo)
    {
        if(_inputEventInfo.inputState == InputState.Triggered)
        {
            if (door != null)
                door.InteractWithDoor();
        }
    }
    #endregion

    #region ONDESTORY
    ///////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// OnDestroy
    /// </summary>
    ///////////////////////////////////////////////////////////////////////////////////////////////
    void OnDestroy()
    {
        //remove listeners
        InputEvents.Interact.Unsubscribe(OnDoorInteraction);
    }
    #endregion
}